modules:

module S {

    import 0x0.Signature;
    public check_sig(sig: bytearray, pub_key: bytearray, message: bytearray): bool {
        let output: bool;
        output = Signature.ed25519_verify(copy(sig), copy(pub_key), copy(message));
        return copy(output);
    }

    struct T{
        fc: R#LibraCoin.T,
        fint: u64,
    }
}

script:
import 0x0.LibraAccount;
import 0x0.LibraCoin;
import Transaction.S;


main() {
    let signature: bytearray;
    let public_key: bytearray;
    let message: bytearray;

    let check_sig_output: bool;
    let expected_output: bool;

    let addr: address;
    let sender_original_balance: u64;

    let five_coins: R#LibraCoin.T;
    let five_coins_ref: &R#LibraCoin.T;
    let five_coins_value: u64;
    let sender_new_balance: u64;

    let x: bool;

    // check signature
    signature = b"62d6be393b8ec77fb2c12ff44ca8b5bd8bba83b805171bc99f0af3bdc619b20b8bd529452fe62dac022c80752af2af02fb610c20f01fb67a4d72789db2b8b703";
    public_key = b"7013b6ed7dde3cfb1251db1b04ae9cd7853470284085693590a75def645a926d";
    message = b"0000000000000000000000000000000000000000000000000000000000000000";

    check_sig_output = S.check_sig(copy(signature), copy(public_key), copy(message));
    expected_output = true;
    assert(move(check_sig_output) == move(expected_output), 42);


    addr = get_txn_sender();
    sender_original_balance = LibraAccount.balance(copy(addr));
    five_coins = LibraAccount.withdraw_from_sender(5);

    five_coins_ref = &five_coins;
    five_coins_value = LibraCoin.value(move(five_coins_ref));
    assert(move(five_coins_value) == 5, 66);

    sender_new_balance = LibraAccount.balance(copy(addr));
    assert(copy(sender_new_balance) == copy(sender_original_balance) - 5, 77);
    LibraAccount.deposit(move(addr), move(five_coins));

    x = S.check_sig();

    return;
}

// check: LinkerError
// TODO: fix it
